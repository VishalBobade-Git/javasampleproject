pipeline {
    agent any

    environment {
        GIT_REPO_URL = 'https://github.com/VishalBobade-Git/javasampleproject.git'  // Replace with your repo URL
        GIT_BRANCH = 'Master'  // The branch you want to clone
        WORKSPACE_DIR = '/var/lib/jenkins/workspace/Ci_Part/javaProject/Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app'  // Define the working directory
        DOCKER_IMAGE_NAME = 'spring-boot-app'  // Local Docker image name
        DOCKER_HUB_REPO = 'https://hub.docker.com/repository/docker/vish86/simple-java-web-app/spring-boot-app'  // Replace with your Docker Hub repo
        DOCKER_CREDENTIALS_ID = 'vish86'  // Jenkins credentials ID for Docker Hub
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the Git repository
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO_URL}"
            }
        }

        stage('Build with Maven') {
            steps {
                // Change to the specified directory before building
                dir("${WORKSPACE_DIR}") {
                    script {
                        // Run Maven on Linux
                        sh 'mvn clean package'
                    }
                }
            }
        }

        stage('Build Docker Image on Host') {
            steps {
                // Build Docker image using host's Docker daemon
                script {
                    sh """
                    docker build -t ${DOCKER_IMAGE_NAME}:latest ${WORKSPACE_DIR}
                    """
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                // Push Docker image to Docker Hub
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh """
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                        docker tag ${DOCKER_IMAGE_NAME}:latest ${DOCKER_HUB_REPO}:latest
                        docker push ${DOCKER_HUB_REPO}:latest
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build, Docker image creation, and push to Docker Hub completed successfully!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
